#!/usr/bin/env python

import math, os, socket, time, subprocess, datetime, sys, getpass, getopt, yaml
import boto, boto.s3.connection
from boto.s3.lifecycle import Lifecycle, Expiration
import hashlib
import smtplib
from filechunkio import FileChunkIO
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import mysql.connector

config = {}

def main(argv):

	try:                                
		opts, args = getopt.getopt(argv, "hi", ["help", "init"])
	except getopt.GetoptError:
		usage()
		sys.exit(2)

	for opt, arg in opts:
		if opt in ('-h', '--help'):
			usage()
			sys.exit()
		elif opt in ('-i', '--init'):
			new_config()

	check_config()
	if load_config():
		global config
		config = load_config()
		
	# connect to s3
	conn = connect()
	if not conn:
		log('Could not connect to S3')
		sys.exit()

	get_key_size(conn)

def load_config():
	config_path = '/etc/backup/'
	config_file = 'backup.yml'

	if os.path.exists(config_path+config_file):
		with open (config_path+config_file) as f:
			config = yaml.load(f)
	else:
		return False
	return config

def check_config():
	config_path = '/etc/backup/'
	config_file = 'backup.yml'

	if os.path.exists(config_path+config_file):
		with open (config_path+config_file) as f:
			config = yaml.load(f)
	else:
		config = {'s3' : {'access_key' : '', 'secret' : ''}, 'mysql' : { 'user' : '', 'password' : '' } }
		log('No S3 Credentials')
		sys.exit('No S3 Credentials found therefore cannot continue.')
	return config

#connect to S3
def connect():
	global config
  
	access_key = config['s3']['access_key']
	secret =  config['s3']['secret']

	try:
		conn = boto.connect_s3(
			host = 'vault.my-host.co.uk',
			aws_access_key_id = access_key,
			aws_secret_access_key = secret,
			is_secure=True,
			calling_format = boto.s3.connection.OrdinaryCallingFormat()
		)   
		return conn
	except:
		log('Failed to connect to S3')
		return False

def get_key_size(conn):
	bucket = conn.get_bucket('my-bucket')
	rs = bucket.list()
	folders = []
	total_size = 0
	for key in rs:
		if(bytestomegabytes(key.size)>10):
			print key.name + ' ' + str(bytestomegabytes(key.size)) + ' MB'
		total_size = total_size + key.size
	print str(bytestomegabytes(total_size)) + ' MB'

def bytestomegabytes(bytes):
	return (bytes / 1024) / 1024
	
def usage():
	print 'Usage: backup [OPTION...]'
	print '\t -h, --help \t\t\t give this help list'
	print '\t -i, --init \t\t\t force overwriting of S3 and MysQL Credentials\n'

	print 'Mandatory or optional arguments to long options are also mandatory or optional\nfor any corresponding short options.\n'

	print 'Report bugs to alex@asdfx.us'

def log(text, level='info'):
	import logging
	logging.basicConfig(filename='/var/log/backup/expire.log', filemode='a+', level=logging.INFO, format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
	if(level=='info'):
		logging.info(text)
	elif(level=='warning'):
		logging.warning(text)

if __name__ == '__main__':
	main(sys.argv[1:])

